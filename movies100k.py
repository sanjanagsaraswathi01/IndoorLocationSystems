# -*- coding: utf-8 -*-
"""movies100k.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/18RMy_wR8DMF2FFpbGdHqjSy6OpDw0JAZ
"""

import pandas as pd

# Load the dataset
file_path = 'u.data'
data_df = pd.read_csv(file_path, sep='\t', header=None, names=['UserID', 'ItemID', 'Rating', 'Timestamp'])
# Display the first few rows of the DataFrame
data_df.head()

unique_userid = data_df['UserID'].unique()
unique_itemid = data_df['ItemID'].unique()
unique_ratings = data_df['Rating'].unique()

print(len(unique_itemid))
print(len(unique_userid))
print(len(unique_ratings))

# Group the data by 'UserID' and aggregate both 'ItemID' and 'Rating' into lists
user_movies_and_ratings_df = data_df.groupby('UserID').agg({'ItemID': list, 'Rating': list}).reset_index()

# Display the result
print(user_movies_and_ratings_df.head())

import pandas as pd

# Group the data by 'UserID' and aggregate both 'ItemID' and 'Rating' into lists
user_movies_and_ratings_df = data_df.groupby('UserID').agg({'ItemID': list, 'Rating': list}).reset_index()

# Create an empty list to store the data
data = []

# Iterate through the DataFrame and add each row without labels to the data list
for index, row in user_movies_and_ratings_df.iterrows():
    user_id = row['UserID']
    item_ids = row['ItemID']
    ratings = row['Rating']

    # Iterate through item_ids and ratings and add them to the data list
    for item_id, rating in zip(item_ids, ratings):
        data.append([user_id, item_id, rating])

# Create a DataFrame from the data list
table_df = pd.DataFrame(data, columns=['UserID', 'ItemID', 'Rating'])

# Display the resulting table
print(table_df)

import pandas as pd

# Group the data by 'UserID' and aggregate both 'ItemID' and 'Rating' into lists
user_movies_and_ratings_df = data_df.groupby('UserID').agg({'ItemID': list, 'Rating': list}).reset_index()

# Create an empty list to store individual user tables
user_tables = []

# Iterate through the DataFrame and create individual tables for each user
for index, row in user_movies_and_ratings_df.iterrows():
    user_id = row['UserID']
    item_ids = row['ItemID']
    ratings = row['Rating']

    # Create a DataFrame for the user's data
    user_table = pd.DataFrame({
        'UserID': [user_id] * len(item_ids),
        'ItemID': item_ids,
        'Rating': ratings
    })

    user_tables.append(user_table)

# Access individual user tables by index in the user_tables list
for index, user_table in enumerate(user_tables, start=1):
    print(f"User {index} Table:")
    print(user_table)

import pandas as pd

# Assuming you already have user_movies_and_ratings_df as per your previous code

# Find the common movie IDs watched by all users
common_movie_ids = set.intersection(*(set(row['ItemID']) for _, row in user_movies_and_ratings_df.iterrows()))

# Create an empty DataFrame to store the results
common_movies_table = pd.DataFrame(columns=['UserID', 'MovieID', 'Rating'])

# Iterate through each common movie ID
for movie_id in common_movie_ids:
    # Iterate through users and their ratings for this movie
    for _, row in user_movies_and_ratings_df.iterrows():
        user_id = row['UserID']
        ratings = row['Rating']
        item_ids = row['ItemID']

        # Find the index of the movie in this user's list
        movie_index = item_ids.index(movie_id)

        # Get the rating for this movie from the user
        rating = ratings[movie_index]

        # Append the data to the common_movies_table
        common_movies_table = common_movies_table.append({'UserID': user_id, 'MovieID': movie_id, 'Rating': rating}, ignore_index=True)

# Display the resulting table with the top 5 common movies
top_5_common_movies = common_movies_table.head(5)
print(top_5_common_movies)
print(common_movies_table)

import pandas as pd

# Group the data by 'UserID' and aggregate both 'ItemID' and 'Rating' into lists
user_movies_and_ratings_df = data_df.groupby('UserID').agg({'ItemID': list, 'Rating': list}).reset_index()

# Create a dictionary to store the count of users for each movie
movie_user_count = {}

# Iterate through the DataFrame and count the users for each movie
for index, row in user_movies_and_ratings_df.iterrows():
    item_ids = row['ItemID']

    for item_id in item_ids:
        if item_id in movie_user_count:
            movie_user_count[item_id] += 1
        else:
            movie_user_count[item_id] = 1

# Define the minimum number of users required to consider a movie
min_users = 5

# Filter movies that are watched by at least min_users
common_movies = [item_id for item_id, count in movie_user_count.items() if count >= min_users]

# Create an empty list to store individual user tables
user_tables = []

# Iterate through the DataFrame and create individual tables for each user
for index, row in user_movies_and_ratings_df.iterrows():
    user_id = row['UserID']
    item_ids = row['ItemID']
    ratings = row['Rating']

    # Create a DataFrame for the user's data
    user_table = pd.DataFrame({
        'UserID': [user_id] * len(item_ids),
        'ItemID': item_ids,
        'Rating': ratings
    })

    user_tables.append(user_table)

# Access individual user tables by index in the user_tables list
for index, user_table in enumerate(user_tables, start=1):
    print(f"User {index} Table:")
    print(user_table)

# Create a DataFrame for common movies watched by at least min_users
common_movies_table = pd.DataFrame(columns=['UserID', 'ItemID', 'Rating'])

# Iterate through the user_tables to find common movies
for item_id in common_movies:
    common_users = []
    for user_table in user_tables:
        if item_id in user_table['ItemID'].values:
            common_users.append(user_table[user_table['ItemID'] == item_id])

    if len(common_users) >= min_users:
        common_movies_table = common_movies_table.append(common_users, ignore_index=True)

# Display the common movies table
print("\nCommon Movies Table:")
print(common_movies_table)

import pandas as pd

# Group the data by 'UserID' and aggregate both 'ItemID' and 'Rating' into lists
user_movies_and_ratings_df = data_df.groupby('UserID').agg({'ItemID': list, 'Rating': list}).reset_index()

# Create a dictionary to store the count of users for each movie
movie_user_count = {}

# Iterate through the DataFrame and count the users for each movie
for index, row in user_movies_and_ratings_df.iterrows():
    item_ids = row['ItemID']

    for item_id in item_ids:
        if item_id in movie_user_count:
            movie_user_count[item_id] += 1
        else:
            movie_user_count[item_id] = 1

# Define the minimum number of users required to consider a movie
min_users = 5

# Filter movies that are watched by at least min_users
common_movies = [item_id for item_id, count in movie_user_count.items() if count >= min_users]

# Create an empty list to store individual user tables
user_tables = []

# Iterate through the DataFrame and create individual tables for each user
for index, row in user_movies_and_ratings_df.iterrows():
    user_id = row['UserID']
    item_ids = row['ItemID']
    ratings = row['Rating']

    # Create a DataFrame for the user's data
    user_table = pd.DataFrame({
        'UserID': [user_id] * len(item_ids),
        'ItemID': item_ids,
        'Rating': ratings
    })

    user_tables.append(user_table)

# Access individual user tables by index in the user_tables list
for index, user_table in enumerate(user_tables, start=1):
    print(f"User {index} Table:")
    print(user_table)

# Create a DataFrame for common movies watched by at least min_users
common_movies_table = pd.DataFrame(columns=['UserID', 'ItemID', 'Rating'])

# Iterate through the user_tables to find common movies
for item_id in common_movies:
    common_users = []
    for user_table in user_tables:
        if item_id in user_table['ItemID'].values:
            common_users.append(user_table[user_table['ItemID'] == item_id])

    if len(common_users) >= min_users:
        common_movies_table = common_movies_table.append(common_users, ignore_index=True)

# Sort the common_movies_table by 'UserID' in ascending order
common_movies_table = common_movies_table.sort_values(by='UserID', ascending=True)

# Display the common movies table
print("\nCommon Movies Table (Sorted by UserID):")
print(common_movies_table)

# Display the common movies table
print("\nCommon Movies Table (Sorted by UserID):")
print(common_movies_table)

import pandas as pd

# Group the data by 'UserID' and aggregate both 'ItemID' and 'Rating' into lists
user_movies_and_ratings_df = data_df.groupby('UserID').agg({'ItemID': list, 'Rating': list}).reset_index()

# Create an empty list to store the data
data = []

# Iterate through the DataFrame and add each row without labels to the data list
for index, row in user_movies_and_ratings_df.iterrows():
    user_id = row['UserID']
    item_ids = row['ItemID']
    ratings = row['Rating']

    # Iterate through item_ids and ratings and add them to the data list
    for item_id, rating in zip(item_ids, ratings):
        data.append([user_id, item_id, rating])

# Create a DataFrame from the data list
table_df = pd.DataFrame(data, columns=['UserID', 'ItemID', 'Rating'])

# Find the groups of user IDs who have watched at least 5 of the same movie IDs
min_common_movies = 5

user_groups = table_df.groupby('ItemID')['UserID'].apply(set).reset_index()
user_groups['GroupSize'] = user_groups['UserID'].apply(len)
common_movie_groups = user_groups[user_groups['GroupSize'] >= min_common_movies]

# Display the resulting table of common movie groups
print(common_movie_groups)